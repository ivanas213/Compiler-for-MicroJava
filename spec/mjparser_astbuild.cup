package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;


	Logger log = Logger.getLogger(getClass());


    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal AND, ARROW, ASSIGN, BREAK, CLASS, CONST, COMMA, CONTINUE, DEC, DIV, DOT, DOUBLE_DOT, ELSE, EXTENDS, EQUAL, FIND_AND_REPLACE, FIND_ANY, FOREACH, GT, GTE, INC, IF, LBRACE, LBRACK, LPAREN, LT, LTE, MUL, NEW, NOT_EQUAL, PERCENT, PRINT, PROGRAM, OR, RBRACE, RBRACK, READ, RETURN, RPAREN, SEMI, VOID, WHILE;
nonterminal ActPars ActPars;
nonterminal AssignOp AssignOp;
nonterminal BoolConst BoolConst;
nonterminal Brack Brack;
nonterminal CharConst CharConst;
nonterminal ClassDecl ClassDecl;
nonterminal CondFact CondFact;
nonterminal CondFactList CondFactList;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondTermList CondTermList;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal ConstructorDeclList ConstructorDeclList;
nonterminal ConstructorMethodDeclList ConstructorMethodDeclList;
nonterminal Decl Decl;
nonterminal DeclList DeclList;
nonterminal DesignatorList DesignatorList;
nonterminal DesignatorOrNo DesignatorOrNo;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Else Else;
nonterminal ExprList ExprList;
nonterminal Extends Extends;
nonterminal FindAnyLeftDesignator FindAnyLeftDesignator;
nonterminal FindAnyRightDesignator FindAnyRightDesignator;
nonterminal FormParameters FormParameters;
nonterminal FormPars FormPars;
nonterminal Func Func;
nonterminal IdentFormPars IdentFormPars;
nonterminal IdentOrExpr IdentOrExpr;
nonterminal IdentOrExprList IdentOrExprList;
nonterminal IdentList IdentList;
nonterminal IdentValList IdentValList;
nonterminal Label Label;
nonterminal LocalVarDecl LocalVarDecl;
nonterminal LocalVarDeclList LocalVarDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodType MethodType;
nonterminal NewType NewType;
nonterminal NumConst NumConst;
nonterminal Relop Relop;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal TypeFormPars TypeFormPars;
nonterminal TypeIdent TypeIdent;
nonterminal TypeIdentBracks TypeIdentBracks;
nonterminal TypeIdentList TypeIdentList;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal IdentListLocal IdentListLocal;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Const, Wide, MulopFactor, Mulop, Addop, Designator, Factor, Program, ProgName, ConstDecl, IdentVal, MethodName, Term, Ident;
terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String PLUS, MINUS;


nonterminal rs.etf.pp1.symboltable.concepts.Struct  VarTypeLocal, Type, ConstType, VarType, Expr, AddopTermList, MulopFactorList, AddopTerm, DesignatorExpr;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:P1 DeclList:D2  LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgName ::=(ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList::=(DeclarationList) DeclList:D1 Decl:D2 {: RESULT=new DeclarationList(D1, D2); RESULT.setLine(D1left); :}
            |
            (NoDeclarations) {: RESULT=new NoDeclarations(); :} /*epsilon*/
            ;

Decl::=(ConstDeclatation) ConstDecl:C1 {: RESULT=new ConstDeclatation(C1); RESULT.setLine(C1left); :}
        |
        (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
        |
        (ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}
        ;

MethodDeclList::=(MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
               |
               (NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /*epsilon*/
               ;

ConstDecl::= (ConstDecl) CONST ConstType:C1 IdentValList:I2 SEMI {: RESULT=new ConstDecl(C1, I2); RESULT.setLine(C1left); :};

ConstType::=(ConstType) Type:constType {: RESULT=new ConstType(constType); RESULT.setLine(constTypeleft); :};

IdentValList::=(IdentValueList) IdentValList:I1 COMMA IdentVal:I2 {: RESULT=new IdentValueList(I1, I2); RESULT.setLine(I1left); :}
                |
                (ErrorIdentVal) error COMMA:l
                {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorIdentVal(); :}
                |
                (OneIdentVal) IdentVal:I1 {: RESULT=new OneIdentVal(I1); RESULT.setLine(I1left); :}
                ;

IdentVal::= (IdentVal) IDENT:identName ASSIGN Const:C1 {: RESULT=new IdentVal(identName, C1); RESULT.setLine(identNameleft); :};

Const::=(NumConstant) NUMBER:N1 {: RESULT=new NumConstant(N1); RESULT.setLine(N1left); :}
        |
        (CharConstant) CHAR:C1 {: RESULT=new CharConstant(C1); RESULT.setLine(C1left); :}
        |
        (BoolConstant) BOOL:B1 {: RESULT=new BoolConstant(B1); RESULT.setLine(B1left); :}
        ;

VarDecl::=(VarDeclar) VarType:V1 IdentList:I2 SEMI {: RESULT=new VarDeclar(V1, I2); RESULT.setLine(V1left); :}
           |
		   (ErrorVarDecl) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorVarDecl(); :}
		   ;

VarType::=(VarType) Type:T1 {: RESULT=new VarType(T1); RESULT.setLine(T1left); :};

IdentList::=(IdentificatorList) IdentList:I1 COMMA Ident:I2 {: RESULT=new IdentificatorList(I1, I2); RESULT.setLine(I1left); :}
            |
            (OneIdent) Ident:I1 {: RESULT=new OneIdent(I1); RESULT.setLine(I1left); :}
            ;

Ident::=(Ident)IDENT:varIdent Brack:B1 {: RESULT=new Ident(varIdent, B1); RESULT.setLine(varIdentleft); :};

Brack ::=(Brackets) LBRACK RBRACK {: RESULT=new Brackets(); :}
        |
        (NoBrackets) {: RESULT=new NoBrackets(); :} /*epsilon*/
        ;
ClassDecl::= (ClassDecl) CLASS IDENT:I1 Extends:E2 LBRACE VarDeclList:V3 ConstructorMethodDeclList:C4 RBRACE {: RESULT=new ClassDecl(I1, E2, V3, C4); RESULT.setLine(I1left); :};
Extends::=(ExtendClass) EXTENDS Type:T1 {: RESULT=new ExtendClass(T1); RESULT.setLine(T1left); :}
        |
        (NoExtendClass) {: RESULT=new NoExtendClass(); :} /*epsilon*/
        ;
VarDeclList::=(VarDeclarationList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
            |
            (NoVarDecl) {: RESULT=new NoVarDecl(); :} /*epsilon*/
            ;
ConstructorMethodDeclList::= (ConstructorMethodDeclList)LBRACE ConstructorDeclList:C1 MethodDeclList:M2 RBRACE {: RESULT=new ConstructorMethodDeclList(C1, M2); RESULT.setLine(C1left); :};



ConstructorDecl::=(ConstructorDecl) IDENT:I1 FormParameters:F2 VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new ConstructorDecl(I1, F2, V3, S4); RESULT.setLine(I1left); :};

MethodDecl::=(MethodDecl) MethodType:M1 MethodName:M2 LPAREN FormParameters:F3 RPAREN VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(M1, M2, F3, V4, S5); RESULT.setLine(M1left); :};



VarTypeLocal::=(VarTypeLocal)VarType:V1 {: RESULT=new VarTypeLocal(V1); RESULT.setLine(V1left); :};

IdentListLocal::=(IdentListLocal) IdentList:I1 {: RESULT=new IdentListLocal(I1); RESULT.setLine(I1left); :};

MethodName::=(MethodName)IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};

MethodType::=(MethodNoVoid) Type:T1 {: RESULT=new MethodNoVoid(T1); RESULT.setLine(T1left); :}
            |
            (MethodVoid) VOID {: RESULT=new MethodVoid(); :}
            ;

FormParameters::= (FormParams) FormPars:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
                |
                (NoFormPars) {: RESULT=new NoFormPars(); :} /*epsilon*/
                ;


StatementList::=(StmList) StatementList:S1 Statement:S2 {: RESULT=new StmList(S1, S2); RESULT.setLine(S1left); :}
                |
                (NoStatementList) {: RESULT=new NoStatementList(); :} /*epsilon*/
                ;
FormPars::= (FormPars) TypeIdentList:T1 {: RESULT=new FormPars(T1); RESULT.setLine(T1left); :};

TypeIdentList::=(TypeIdentificatorList) TypeIdentList:T1 COMMA TypeIdent:T2 {: RESULT=new TypeIdentificatorList(T1, T2); RESULT.setLine(T1left); :}
                |
                (OneTypeIdent) TypeIdent:T1 {: RESULT=new OneTypeIdent(T1); RESULT.setLine(T1left); :}
                ;
TypeIdent::= (TypeIdent) TypeFormPars:T1 IdentFormPars:I2 TypeIdentBracks:T3 {: RESULT=new TypeIdent(T1, I2, T3); RESULT.setLine(T1left); :};

TypeFormPars::=(TypeFormPars) Type:T1 {: RESULT=new TypeFormPars(T1); RESULT.setLine(T1left); :};

IdentFormPars::=(IdentFormPars) IDENT:formParName {: RESULT=new IdentFormPars(formParName); RESULT.setLine(formParNameleft); :};


TypeIdentBracks::=(WithBracks) LBRACK RBRACK {: RESULT=new WithBracks(); :}
                |
                (WithoutBracks) {: RESULT=new WithoutBracks(); :} /*epsilon*/
                ;

Type::=(Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Statement::=(DesignatorStatementStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementStatement(D1); RESULT.setLine(D1left); :}
            |
            (ErrorStatement) error SEMI:l
            {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStatement(); :}
            |
            (IfElseStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 Else:E3 {: RESULT=new IfElseStatement(C1, S2, E3); RESULT.setLine(C1left); :}
            |
            (WhileStatement) WHILE LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new WhileStatement(C1, S2); RESULT.setLine(C1left); :}
            |
            (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
            |
            (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
            |
            (ReturnStatement) RETURN SEMI {: RESULT=new ReturnStatement(); :}
            |
            (ReturnExprStatement) RETURN Expr:E1 SEMI {: RESULT=new ReturnExprStatement(E1); RESULT.setLine(E1left); :}
            |
            (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
            |
            (PrintStatement) PRINT LPAREN Expr:E1 Wide:W2 RPAREN SEMI {: RESULT=new PrintStatement(E1, W2); RESULT.setLine(E1left); :}
            |
            (FindAnyStatement) Designator:des1 AssignOp:A1 Designator:des2 DOT FIND_ANY LPAREN Expr:E2 RPAREN SEMI {: RESULT=new FindAnyStatement(des1, A1, des2, E2); RESULT.setLine(des1left); :}
            |
            (PrintNumConstStatement) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintNumConstStatement(E1, N2); RESULT.setLine(E1left); :}
            |
            (StatementListStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementListStatement(S1); RESULT.setLine(S1left); :}
            |
            (FindAndReplaceStatement) Designator:D1 AssignOp:A2 Designator:D3 DOT FIND_AND_REPLACE LPAREN Expr:E4 COMMA IDENT:I5 ARROW Expr:E6 RPAREN SEMI {: RESULT=new FindAndReplaceStatement(D1, A2, D3, E4, I5, E6); RESULT.setLine(D1left); :}
            |
            (ForEachStatment) Designator:D1 DOT FOREACH LPAREN IDENT:I2 ARROW Statement:S3  RPAREN SEMI {: RESULT=new ForEachStatment(D1, I2, S3); RESULT.setLine(D1left); :}
            ;

Wide::=(YesWide) COMMA NumConst:N1 {: RESULT=new YesWide(N1); RESULT.setLine(N1left); :}
        |
        (NoWide) {: RESULT=new NoWide(); :} /*epsilon*/
        ;

Else::=(ElseStm) ELSE Statement:S1 {: RESULT=new ElseStm(S1); RESULT.setLine(S1left); :}
        |
        (NoElse) {: RESULT=new NoElse(); :} /*epsilon*/
        ;

DesignatorStatement::=(DesignatorExpress) Designator:D1 AssignOp:A2 DesignatorExpr:D3 {: RESULT=new DesignatorExpress(D1, A2, D3); RESULT.setLine(D1left); :}
                    |
                    (DesignatorNoPars) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorNoPars(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorPars) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorPars(D1, A2); RESULT.setLine(D1left); :}
                    |
                    (DesignatorInc) Designator:D1 INC {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorDec) Designator:D1 DEC {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorAssignEmpty) LBRACK RBRACK ASSIGN Designator:D1 {: RESULT=new DesignatorAssignEmpty(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorAssignNotEmpty) LBRACK DesignatorList:D1 ASSIGN Designator:D2 {: RESULT=new DesignatorAssignNotEmpty(D1, D2); RESULT.setLine(D1left); :}
                    ;

DesignatorExpr::=(DesignatorExpr) Expr:E1 {: RESULT=new DesignatorExpr(E1); RESULT.setLine(E1left); :};

DesignatorList::=(DesignList) DesignatorList:D1 COMMA DesignatorOrNo:D2 {: RESULT=new DesignList(D1, D2); RESULT.setLine(D1left); :}
                |
                (OneDesignator) DesignatorOrNo:D1 {: RESULT=new OneDesignator(D1); RESULT.setLine(D1left); :}
                ;
DesignatorOrNo::=(DesignatorYes) Designator:D1 {: RESULT=new DesignatorYes(D1); RESULT.setLine(D1left); :}
                |
                (DesignatorNo) {: RESULT=new DesignatorNo(); :} /*epsilon*/
                ;

ActPars::=(ExpressionList) ActPars:A1 COMMA Expr:E2 {: RESULT=new ExpressionList(A1, E2); RESULT.setLine(A1left); :}
         |
         (OneExpr) Expr:E1 {: RESULT=new OneExpr(E1); RESULT.setLine(E1left); :}
         ;
Condition::=(Condition) CondTermList:C1 {: RESULT=new Condition(C1); RESULT.setLine(C1left); :};

CondTermList::=(ConditionTermList) CondTermList:C1 OR CondTerm:C2 {: RESULT=new ConditionTermList(C1, C2); RESULT.setLine(C1left); :}
            |
            (OneCondTerm) CondTerm:C1 {: RESULT=new OneCondTerm(C1); RESULT.setLine(C1left); :}
            ;
CondTerm::=(CondTerm)  CondFactList:C1 {: RESULT=new CondTerm(C1); RESULT.setLine(C1left); :};

CondFactList::=(ConditionFactList) CondFactList:C1 AND CondFact:C2 {: RESULT=new ConditionFactList(C1, C2); RESULT.setLine(C1left); :}
                |
                (OneConditionFact) CondFact:C1 {: RESULT=new OneConditionFact(C1); RESULT.setLine(C1left); :}
                ;

CondFact::=(CondFactNoRelop) Expr:E1 {: RESULT=new CondFactNoRelop(E1); RESULT.setLine(E1left); :}
           |
           (CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
           ;

Expr::=(Expr) AddopTermList:A1 {: RESULT=new Expr(A1); RESULT.setLine(A1left); :};

AddopTermList::=(AddopTerminalList) AddopTermList:A1 AddopTerm:A2 {: RESULT=new AddopTerminalList(A1, A2); RESULT.setLine(A1left); :}
                |
                (OneAddopTerm) Term:T1 {: RESULT=new OneAddopTerm(T1); RESULT.setLine(T1left); :}
                |
                (OneNegativeAddopTerm) MINUS:M1 Term:T2 {: RESULT=new OneNegativeAddopTerm(M1, T2); RESULT.setLine(M1left); :}
                ;
AddopTerm::=(AddopTerm) Addop:A1 Term:T2 {: RESULT=new AddopTerm(A1, T2); RESULT.setLine(A1left); :};

Term::=(Term)MulopFactorList:M1 {: RESULT=new Term(M1); RESULT.setLine(M1left); :};

MulopFactorList::=(MulopFactL) MulopFactorList:M1 MulopFactor:M2 {: RESULT=new MulopFactL(M1, M2); RESULT.setLine(M1left); :}
                |
                (OneMulopFactor) Factor:F1 {: RESULT=new OneMulopFactor(F1); RESULT.setLine(F1left); :}
                ;

MulopFactor::=(MulopFactor) Mulop:M1 Factor:F2 {: RESULT=new MulopFactor(M1, F2); RESULT.setLine(M1left); :};

Factor::= (FactorDesignator) Designator:D1 Func:F2 {: RESULT=new FactorDesignator(D1, F2); RESULT.setLine(D1left); :}
        |
        (FactorNumConst) NUMBER:N1 {: RESULT=new FactorNumConst(N1); RESULT.setLine(N1left); :}
        |
        (FactorCharConst) CHAR:C1 {: RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); :}
        |
        (FactorBoolConst) BOOL:B1 {: RESULT=new FactorBoolConst(B1); RESULT.setLine(B1left); :}
        |
        (FactorNew) NEW Type:T1 NewType:N2 {: RESULT=new FactorNew(T1, N2); RESULT.setLine(T1left); :}
        |
        (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
        ;
NewType::= (NewTypeExpr) LBRACK Expr:E1 RBRACK {: RESULT=new NewTypeExpr(E1); RESULT.setLine(E1left); :}
         |
         (NewTypeNoActPars) LPAREN RPAREN {: RESULT=new NewTypeNoActPars(); :}
         |
         (NewTypeActPars) LPAREN ActPars:A1 RPAREN {: RESULT=new NewTypeActPars(A1); RESULT.setLine(A1left); :}
         ;

Func::=(FuncParen) LPAREN RPAREN {: RESULT=new FuncParen(); :}
       |
       (FuncArg) LPAREN ActPars:A1 RPAREN {: RESULT=new FuncArg(A1); RESULT.setLine(A1left); :}
       |
       (NoFunc) {: RESULT=new NoFunc(); :} /*epsilon*/
       ;
Designator::=(IdentOrExprL) Designator:leftIdent IdentOrExpr:rightIdent {: RESULT=new IdentOrExprL(leftIdent, rightIdent); RESULT.setLine(leftIdentleft); :}
             |
            (NoIdentOrExprList) IDENT:I1 {: RESULT=new NoIdentOrExprList(I1); RESULT.setLine(I1left); :}
             ;



IdentOrExpr::=(IdentOrExprIdent) DOT IDENT:I1 {: RESULT=new IdentOrExprIdent(I1); RESULT.setLine(I1left); :}
            |
            (IdentOrExprExpr) LBRACK Expr:E1 RBRACK {: RESULT=new IdentOrExprExpr(E1); RESULT.setLine(E1left); :}
            ;

Label::=(Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

AssignOp::=(AssignOp) ASSIGN {: RESULT=new AssignOp(); :};

Relop::=(RelopEqual) EQUAL {: RESULT=new RelopEqual(); :}
        |
        (RelopNotEqual) NOT_EQUAL {: RESULT=new RelopNotEqual(); :}
        |
        (RelopGT) GT {: RESULT=new RelopGT(); :}
        |
        (RelopGTE) GTE {: RESULT=new RelopGTE(); :}
        |
        (RelopLT) LT {: RESULT=new RelopLT(); :}
        |
        (RelopLTE) LTE {: RESULT=new RelopLTE(); :}
        ;

Addop::=(AddopPlus) PLUS:P1 {: RESULT=new AddopPlus(P1); RESULT.setLine(P1left); :}
        |
        (AddopMinus) MINUS:M1 {: RESULT=new AddopMinus(M1); RESULT.setLine(M1left); :}
        ;

Mulop::=(MulopMul) MUL {: RESULT=new MulopMul(); :}
        |
        (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
        |
        (MulopPercent) PERCENT {: RESULT=new MulopPercent(); :}
        ;









